<script>
    document.addEventListener('turbo:submit-end', (event) => {
        if (event.detail.success) {
            const form = document.getElementById('new_message_form');
            if (form) {
                form.reset();
            }
        }
    });

</script>

<% chat_partner = current_user == @chat.sender ? @chat.receiver : @chat.sender %>
<% provide(:title, "Chat with #{chat_partner.name.capitalize}") %>

<div class="container my-4">
  <div class="card" style="height: calc(100vh - 150px);">
    <div class="card-header d-flex justify-content-between align-items-center">
      <%= link_to 'Back', chats_path, class: 'btn btn-outline-primary me-auto' %>
      <div class="d-flex flex-grow-1 justify-content-center align-items-center">
        <div class="profile-container">
          <%= link_to image_tag(chat_partner.avatar.url, class: 'rounded-circle avatar-image'), profile_path(chat_partner) %>
          <% if chat_partner.online? %>
            <i class="fa-solid fa-circle fa-beat-fade status-icon" style="color: #3ef308;"></i>
          <% end %>
        </div>
        <h4 class="mb-0">&nbsp;Chat with <%= chat_partner.name.capitalize %></h4>
        <% if chat_partner.email == "flstudio444@gmail.com" %>
          <h6 style="font-family: Tahoma, serif; color: rgb(231,83,83); font-weight: bolder; text-shadow: greenyellow 2px 2px">Admin</h6>
        <% end %>
      </div>
    </div>
    <div class="card-body" style="overflow-y: auto; height: calc(100vh - 150px);">
      <ul class="list-unstyled" id="messages">
        <% @messages.each do |message| %>
          <li id="message_<%= message.id %>" class="message-item">
            <div class="d-flex align-items-start">
              <%= link_to image_tag(message.author.avatar.url, class: 'rounded-circle avatar-image'), profile_path(message.author) %>
              <div class="message-content-container">
                <div class="message-metadata">
                  <%= link_to message.author.name.capitalize, profile_path(message.author), class: 'message-author' %>
                  <span class="message-timestamp"><%= message.created_at.in_time_zone('Central Time (US & Canada)').strftime("%-d %b %Y, %l:%M %p") %></span>
                </div>
                <div class="message-body">
                  <div class="message-text">
                    <%= simple_format(message.content, {}, wrapper_tag: "div") %>
                  </div>
                  <% if message.author == current_user %>
                    <div class="message-delete">
                      <%= link_to message_path(message), method: :delete, data: { confirm: 'Are you sure?', turbo_method: :delete }, title: 'Delete Message', class: "icon-link" do %>
                        <i class="fa-regular fa-trash-can"></i>
                      <% end %>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          </li>
        <% end %>
      </ul>
    </div>
    <div class="card-footer">
      <%= turbo_frame_tag "new_message" do %>
        <%= render "messages/form", message: Message.new(chat_id: @chat.id) %>
      <% end %>
    </div>
  </div>
</div>


<script>
    function scrollToBottom() {
        var messagesContainer = document.querySelector('.card-body');
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        } else {
            console.log("Just ignore me");
        }
    }

    // Scroll to the bottom when Turbo loads the page
    document.addEventListener('turbo:load', scrollToBottom);

    // MutationObserver to detect when new messages are added and scroll to bottom
    var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            if (mutation.addedNodes.length) {
                scrollToBottom();
            }
        });
    });

    // Start observing the target node for configured mutations
    observer.observe(document.getElementById('messages'), {childList: true, subtree: true});

    // Disconnect the observer when it's no longer needed to prevent memory leaks
    function disconnectObserver() {
        observer.disconnect();
    }

    document.addEventListener('turbo:load', function () {
        var textarea = document.querySelector('.chat-textarea');

        function resizeTextarea() {
            textarea.style.height = 'auto'; // Auto adjust the height
            textarea.style.height = textarea.scrollHeight + 'px'; // Set new height
        }

        if (textarea) {
            textarea.addEventListener('keydown', function (event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    // When ENTER is pressed without SHIFT
                    event.preventDefault(); // Prevent default to avoid new line
                    if (textarea.value.trim() !== '') {
                        // Trigger the form submission
                        document.getElementById('new_message_form').requestSubmit();
                    }
                } else if (event.key === 'Enter' && event.shiftKey) {
                    // When SHIFT + ENTER is pressed
                    // Let the default action happen, which adds a new line
                    setTimeout(resizeTextarea, 0); // Resize after the new line is added
                }
            });
            resizeTextarea(); // Adjust for initial content
        }

        var messageForm = document.getElementById('new_message_form');
        if (messageForm) {
            messageForm.addEventListener('submit', function () {
                resizeTextarea(); // Resize the textarea right before the form is submitted
                // Additional handling for Turbo can be added here if needed
            });

            // Listen for turbo stream submit-end event
            document.addEventListener('turbo:submit-end', (event) => {
                if (event.detail.success) {
                    // Reset the form and resize the textarea after the message is sent
                    messageForm.reset();
                    resizeTextarea(); // Resize after resetting the form
                }
            });
        }
    });
</script>